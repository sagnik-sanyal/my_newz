// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../../core/models/cached_models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 6127384436382843854),
      name: 'CacheControlBox',
      lastPropertyId: const obx_int.IdUid(9, 8877324351455072591),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2599851189265327933),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7099187244950398252),
            name: 'maxAge',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5702769110516356435),
            name: 'privacy',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7140297276190788408),
            name: 'noCache',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6236008016021119360),
            name: 'noStore',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8067887915569753436),
            name: 'other',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 9036212564967380632),
            name: 'maxStale',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7582759441923361814),
            name: 'minFresh',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8877324351455072591),
            name: 'mustRevalidate',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 7757242034369518074),
      name: 'CacheResponseBox',
      lastPropertyId: const obx_int.IdUid(14, 9005972310128254576),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 384164057980000480),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6030895417021694193),
            name: 'key',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5558105826392194242),
            name: 'content',
            type: 23,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4611944764435271943),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5861065848209580861),
            name: 'eTag',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 9121158123877573396),
            name: 'expires',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1615133486041024916),
            name: 'headers',
            type: 23,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4135096318984637787),
            name: 'lastModified',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3472500042536019877),
            name: 'maxStale',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 8773714994346131816),
            name: 'responseDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 8292870704907329162),
            name: 'requestDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 8983354669219989635),
            name: 'url',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 2408818801792969543),
            name: 'priority',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 9005972310128254576),
            name: 'cacheControlId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 5988908979586754039),
            relationTarget: 'CacheControlBox')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 7757242034369518074),
      lastIndexId: const obx_int.IdUid(1, 5988908979586754039),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    CacheControlBox: obx_int.EntityDefinition<CacheControlBox>(
        model: _entities[0],
        toOneRelations: (CacheControlBox object) => [],
        toManyRelations: (CacheControlBox object) => {},
        getId: (CacheControlBox object) => object.id,
        setId: (CacheControlBox object, int id) {
          object.id = id;
        },
        objectToFB: (CacheControlBox object, fb.Builder fbb) {
          final privacyOffset =
              object.privacy == null ? null : fbb.writeString(object.privacy!);
          final otherOffset = object.other == null
              ? null
              : fbb.writeList(
                  object.other!.map(fbb.writeString).toList(growable: false));
          fbb.startTable(10);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.maxAge);
          fbb.addOffset(2, privacyOffset);
          fbb.addBool(3, object.noCache);
          fbb.addBool(4, object.noStore);
          fbb.addOffset(5, otherOffset);
          fbb.addInt64(6, object.maxStale);
          fbb.addInt64(7, object.minFresh);
          fbb.addBool(8, object.mustRevalidate);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final maxAgeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final privacyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final noCacheParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 10);
          final noStoreParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 12);
          final otherParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = CacheControlBox(
              id: idParam,
              maxAge: maxAgeParam,
              privacy: privacyParam,
              noCache: noCacheParam,
              noStore: noStoreParam,
              other: otherParam)
            ..maxStale =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16)
            ..minFresh =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18)
            ..mustRevalidate =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20);

          return object;
        }),
    CacheResponseBox: obx_int.EntityDefinition<CacheResponseBox>(
        model: _entities[1],
        toOneRelations: (CacheResponseBox object) => [object.cacheControl],
        toManyRelations: (CacheResponseBox object) => {},
        getId: (CacheResponseBox object) => object.id,
        setId: (CacheResponseBox object, int id) {
          object.id = id;
        },
        objectToFB: (CacheResponseBox object, fb.Builder fbb) {
          final keyOffset = fbb.writeString(object.key);
          final contentOffset = object.content == null
              ? null
              : fbb.writeListInt8(object.content!);
          final eTagOffset =
              object.eTag == null ? null : fbb.writeString(object.eTag!);
          final headersOffset = object.headers == null
              ? null
              : fbb.writeListInt8(object.headers!);
          final lastModifiedOffset = object.lastModified == null
              ? null
              : fbb.writeString(object.lastModified!);
          final urlOffset = fbb.writeString(object.url);
          fbb.startTable(15);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, keyOffset);
          fbb.addOffset(2, contentOffset);
          fbb.addInt64(3, object.date?.millisecondsSinceEpoch);
          fbb.addOffset(4, eTagOffset);
          fbb.addInt64(5, object.expires?.millisecondsSinceEpoch);
          fbb.addOffset(6, headersOffset);
          fbb.addOffset(7, lastModifiedOffset);
          fbb.addInt64(8, object.maxStale?.millisecondsSinceEpoch);
          fbb.addInt64(9, object.responseDate.millisecondsSinceEpoch);
          fbb.addInt64(10, object.requestDate?.millisecondsSinceEpoch);
          fbb.addOffset(11, urlOffset);
          fbb.addInt64(12, object.priority);
          fbb.addInt64(13, object.cacheControl.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final expiresValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final maxStaleValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final requestDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24);
          final keyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final priorityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          final responseDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0));
          final urlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 26, '');
          final contentParam =
              const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final dateParam = dateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(dateValue);
          final eTagParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final expiresParam = expiresValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(expiresValue);
          final headersParam =
              const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final lastModifiedParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final maxStaleParam = maxStaleValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(maxStaleValue);
          final requestDateParam = requestDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(requestDateValue);
          final object = CacheResponseBox(
              key: keyParam,
              priority: priorityParam,
              responseDate: responseDateParam,
              url: urlParam,
              content: contentParam,
              date: dateParam,
              eTag: eTagParam,
              expires: expiresParam,
              headers: headersParam,
              lastModified: lastModifiedParam,
              maxStale: maxStaleParam,
              requestDate: requestDateParam)
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.cacheControl.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.cacheControl.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [CacheControlBox] entity fields to define ObjectBox queries.
class CacheControlBox_ {
  /// See [CacheControlBox.id].
  static final id =
      obx.QueryIntegerProperty<CacheControlBox>(_entities[0].properties[0]);

  /// See [CacheControlBox.maxAge].
  static final maxAge =
      obx.QueryIntegerProperty<CacheControlBox>(_entities[0].properties[1]);

  /// See [CacheControlBox.privacy].
  static final privacy =
      obx.QueryStringProperty<CacheControlBox>(_entities[0].properties[2]);

  /// See [CacheControlBox.noCache].
  static final noCache =
      obx.QueryBooleanProperty<CacheControlBox>(_entities[0].properties[3]);

  /// See [CacheControlBox.noStore].
  static final noStore =
      obx.QueryBooleanProperty<CacheControlBox>(_entities[0].properties[4]);

  /// See [CacheControlBox.other].
  static final other = obx.QueryStringVectorProperty<CacheControlBox>(
      _entities[0].properties[5]);

  /// See [CacheControlBox.maxStale].
  static final maxStale =
      obx.QueryIntegerProperty<CacheControlBox>(_entities[0].properties[6]);

  /// See [CacheControlBox.minFresh].
  static final minFresh =
      obx.QueryIntegerProperty<CacheControlBox>(_entities[0].properties[7]);

  /// See [CacheControlBox.mustRevalidate].
  static final mustRevalidate =
      obx.QueryBooleanProperty<CacheControlBox>(_entities[0].properties[8]);
}

/// [CacheResponseBox] entity fields to define ObjectBox queries.
class CacheResponseBox_ {
  /// See [CacheResponseBox.id].
  static final id =
      obx.QueryIntegerProperty<CacheResponseBox>(_entities[1].properties[0]);

  /// See [CacheResponseBox.key].
  static final key =
      obx.QueryStringProperty<CacheResponseBox>(_entities[1].properties[1]);

  /// See [CacheResponseBox.content].
  static final content =
      obx.QueryByteVectorProperty<CacheResponseBox>(_entities[1].properties[2]);

  /// See [CacheResponseBox.date].
  static final date =
      obx.QueryDateProperty<CacheResponseBox>(_entities[1].properties[3]);

  /// See [CacheResponseBox.eTag].
  static final eTag =
      obx.QueryStringProperty<CacheResponseBox>(_entities[1].properties[4]);

  /// See [CacheResponseBox.expires].
  static final expires =
      obx.QueryDateProperty<CacheResponseBox>(_entities[1].properties[5]);

  /// See [CacheResponseBox.headers].
  static final headers =
      obx.QueryByteVectorProperty<CacheResponseBox>(_entities[1].properties[6]);

  /// See [CacheResponseBox.lastModified].
  static final lastModified =
      obx.QueryStringProperty<CacheResponseBox>(_entities[1].properties[7]);

  /// See [CacheResponseBox.maxStale].
  static final maxStale =
      obx.QueryDateProperty<CacheResponseBox>(_entities[1].properties[8]);

  /// See [CacheResponseBox.responseDate].
  static final responseDate =
      obx.QueryDateProperty<CacheResponseBox>(_entities[1].properties[9]);

  /// See [CacheResponseBox.requestDate].
  static final requestDate =
      obx.QueryDateProperty<CacheResponseBox>(_entities[1].properties[10]);

  /// See [CacheResponseBox.url].
  static final url =
      obx.QueryStringProperty<CacheResponseBox>(_entities[1].properties[11]);

  /// See [CacheResponseBox.priority].
  static final priority =
      obx.QueryIntegerProperty<CacheResponseBox>(_entities[1].properties[12]);

  /// See [CacheResponseBox.cacheControl].
  static final cacheControl =
      obx.QueryRelationToOne<CacheResponseBox, CacheControlBox>(
          _entities[1].properties[13]);
}
